import pathlib

from gensim.models.doc2vec import Doc2Vec as GensimDoc2Vec
from gensim.models.doc2vec import TaggedDocument

from .embedding_generator import AbstractEmbeddingGenerator
from ..config import Argument, IntArgument, EnumArgument, Config


class Doc2VecGenerator(AbstractEmbeddingGenerator):
    def generate_embedding(self, issues: list[str], path: pathlib.Path, conf: Config):
        documents = []
        for idx, doc in enumerate(issues):
            documents.append(TaggedDocument(doc, [idx]))
        min_count = self.params["min-count"]
        vector_size = self.params["vector-length"]
        doc2vec_model = GensimDoc2Vec(
            documents,
            min_count=min_count,
            vector_size=vector_size,
            dm=self.params["algorithm"] == "PV-DM",
            workers=conf.get("system.resources.threads"),
        )
        doc2vec_model.save(str(path))

    @staticmethod
    def get_arguments() -> dict[str, Argument]:
        return super(Doc2VecGenerator, Doc2VecGenerator).get_arguments() | {
            "vector-length": IntArgument(
                name="vector-length",
                description="Size of the vectors generated by Word2Vec",
                minimum=2,
                maximum=10000,
            ),
            "min-count": IntArgument(
                name="min-count",
                description="Minimum amount of occurrences for a word to be included in the analysis",
                minimum=0,
                maximum=10000,
            ),
            "algorithm": EnumArgument(
                name="algorithm",
                description="Doc2Vec algorithm to use",
                default="PV-DM",
                options=["PV-DM", "PV-DBOW"],
            ),
        }
